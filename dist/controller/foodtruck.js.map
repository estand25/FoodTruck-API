{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","remove","_id","reviews","newReview","title","text","review","push","sent"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\r\nimport { Router } from 'express';\r\nimport FoodTruck from '../model/foodtruck';\r\nimport Review from '../model/review';\r\n\r\nimport { authenticate } from '../middleware/authMiddleware';\r\n\r\nexport default({config, db}) => {\r\n  let api = Router();\r\n\r\n  //CRUD - Create Read Update Delete\r\n\r\n  // '/v1/foodtruck/add'\r\n  api.post('/add', authenticate, (req,res) => {\r\n    let newFoodTruck = new FoodTruck();\r\n    newFoodTruck.name = req.body.name;\r\n    newFoodTruck.foodtype = req.body.foodtype;\r\n    newFoodTruck.avgcost = req.body.avgcost;\r\n    newFoodTruck.geometry.coordinates = req.body.geometry.coordinates;\r\n\r\n    newFoodTruck.save(err => {\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n      res.json({message: \"Food Truck saved successfully\"});\r\n    });\r\n  });\r\n\r\n  // '/v1/foodtruck' - Read All\r\n  api.get('/', authenticate, (req,res) =>{\r\n    FoodTruck.find({}, (err, foodtrucks) =>{\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n\r\n      res.json(foodtrucks);\r\n    });\r\n  });\r\n\r\n  // '/v1/foodtruck/:id' - Read 1\r\n  api.get('/:id', authenticate, (req,res) =>{\r\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n      res.json(foodtruck);\r\n    });\r\n  });\r\n\r\n  // '/v1/foodtruck/:id' - Update\r\n  api.put('/:id', authenticate, (req,res) => {\r\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n      foodtruck.name = req.body.name;\r\n      foodtruck.foodtype = req.body.foodtype;\r\n      foodtruck.avgcost = req.body.avgcost;\r\n      foodtruck.geometry.coordinates = req.body.geometry.coordinates;\r\n\r\n      foodtruck.save(err =>{\r\n        if(err){\r\n          res.send(err);\r\n        }\r\n        res.json({message: \"FoodTruck info updated\"});\r\n      });\r\n    });\r\n  });\r\n\r\n  // '/v1/foodtruck/:id' - Delete\r\n  api.delete('/:id', (req,res) =>{\r\n    FoodTruck.remove({_id: req.params.id\r\n    }, (err,foodtruck) => {\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n\r\n      Review.find({foodtruck: req.params.id}, (err,reviews) =>{\r\n        if(err){\r\n          res.send(err);\r\n        }\r\n\r\n        Review.remove({foodtruck: req.params.id}, (err, reviews) =>{\r\n            if(err){\r\n              res.send(err);\r\n            }\r\n\r\n            res.json({message: \"Food truck & all it reviews have successfully Removed\"});\r\n          });\r\n        });\r\n      });\r\n    });\r\n\r\n  // add review for a specific foodtruck id\r\n  // '/v1/foodtruck/reviews/add/:id'\r\n  api.post('/review/add/:id', authenticate, (req, res) =>{\r\n    FoodTruck.findById(req.params.id, (err, foodtruck) =>{\r\n      if(err){\r\n        res.send(err);\r\n      }\r\n      let newReview = new Review();\r\n\r\n      newReview.title = req.body.title;\r\n      newReview.text = req.body.text;\r\n      newReview.foodtruck = foodtruck._id;\r\n\r\n      newReview.save((err, review) => {\r\n        if(err){\r\n          res.send(err);\r\n        }\r\n\r\n        foodtruck.reviews.push(newReview);\r\n        foodtruck.save(err => {\r\n          if(err){\r\n            res.send(err);\r\n          }\r\n\r\n          res.json({message: \"Food truck review saved!\"});\r\n        });\r\n      });\r\n    });\r\n  });\r\n\r\n  //get review for a specific food truck id\r\n  // '/v1/foodtruck/reviews/:id'\r\n  api.get('/reviews/:id', authenticate, (req,res) =>{\r\n    Review.find({foodtruck: req.params.id}, (err,reviews) =>{\r\n      if(err){\r\n        res.sent(err);\r\n      }\r\n\r\n      res.json(reviews);\r\n    });\r\n  });\r\n\r\n    // '/v1/foodtruck/foodtype/:foodtype' - Read All\r\n    api.get('/foodtype/:foodtype', authenticate, (req,res) =>{\r\n      FoodTruck.find({foodtype: req.params.foodtype}, (err, foodtrucks) =>{\r\n        if(err){\r\n          res.send(err);\r\n        }\r\n\r\n        res.json(foodtrucks);\r\n      });\r\n    });\r\n\r\n  return api;\r\n}\r\n"]}